<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Introduction to cloud-native application environment architecture</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/o9LLSQCvgkw/" /><category term="Cloud" /><category term="Containers" /><category term="Integration" /><category term="Microservices" /><category term="Red Hat Integration" /><category term="Agile Integration" /><category term="cloud native development" /><category term="container" /><category term="microservices" /><author><name>Christina Lin</name></author><id>https://developers.redhat.com/blog/?p=604597</id><updated>2019-07-02T07:00:59Z</updated><published>2019-07-02T07:00:59Z</published><content type="html">&lt;p&gt;Cloud-native environment architecture can be challenging to understand. To help make sense of it for application developers and software/system architects,  I will attempt to explain the various parts and how they work together. Toward this end, I find it helpful to think about the architecture in four separate layers: application software development, service scaling, application network, and container orchestration platform.&lt;/p&gt; &lt;p&gt;In this article, I will describe the first technology layer: application software development. I drew the following diagram to make these concepts easier to visualize.&lt;br /&gt; &lt;span id="more-604597"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;img class="wp-image-604627 alignright" src="https://developers.redhat.com/blog/wp-content/uploads/2019/06/imageedit_78_5224434789-181x300.png" alt="" width="337" height="558" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/06/imageedit_78_5224434789-181x300.png 181w, https://developers.redhat.com/blog/wp-content/uploads/2019/06/imageedit_78_5224434789-617x1024.png 617w" sizes="(max-width: 337px) 100vw, 337px" /&gt;&lt;/p&gt; &lt;p&gt;Container native or cloud-native application development is often referred to as a common greenfield system, where applications are broken down into microservices. Each microservice tends to have its own source of data, be independent from the others, and also be deployed in a distributed way.&lt;/p&gt; &lt;p&gt;The benefit of such implementation makes applications ever more agile and polyglot, isolating problems, and making the codebase smaller and supposedly easier to maintain.  If I tell were to you that this means life will be good from now on, I would be lying.&lt;/p&gt; &lt;p&gt;To achieve the benefit of an agile, truly scalable, automated container/cloud-native system, a lot of thought needs to go into considering factors like applications, platforms, and personas, including:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Using the right technology for the scenario &lt;ul&gt; &lt;li&gt;Complex solutions can sometimes be overkill&lt;/li&gt; &lt;li&gt;Using the wrong solution in the wrong place can cause displaced responsibility&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Domain-driven design with continuous integration &lt;ul&gt; &lt;li&gt;Async events or API&lt;/li&gt; &lt;li&gt;How to integrate with existing brownfield applications&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The diagram shows a rough overview of how various elements of container/cloud-native system work together, and I hope it also helps you decide when or whether to introduce a particular piece of technology.&lt;/p&gt; &lt;p&gt;To make more sense for application developers and software/system architects, I deliberately divided the architecture into four planes. Each plane itself can be broken into much more detail. It consists of many pieces of technologies, and these are abstracted based on the fundamental functionality they bring to the cloud-native application environment.&lt;/p&gt; &lt;h2&gt;Application software development layer&lt;/h2&gt; &lt;p&gt;The application software development layer is about modeling domains, how microservices are defined, how they should be deployed, and the software patterns applied in the system that can help to develop a loosely coupled and continuously evolving system. It’s also about the communication technology and patterns between applications.&lt;/p&gt; &lt;h2&gt;Service scaling — Knative&lt;/h2&gt; &lt;p&gt;Scaling to zero when the application is not in use will allow resource optimization. This layer takes the characteristic of cloud computing to the fullest, but not all services need it.&lt;/p&gt; &lt;h2&gt;Application network — Service mesh&lt;/h2&gt; &lt;p&gt;This is a very common architecture functionality in the distributed microservices environment. Having this layer allows better and more uniform control over the communication between microservices and better observability, too. DevOps can use this layer to apply common security, failure recovery, rollout policies, etc., as well as setting customized ones. This layer takes away much redundant work for developers.&lt;/p&gt; &lt;h2&gt;Container orchestration platform — Red Hat OpenShift&lt;/h2&gt; &lt;p&gt;This is the foundation of cloud-native environment architecture. It provides basic and essential capabilities, such as container orchestration, service discovery, CI/CD automation, logging, etc.&lt;/p&gt; &lt;h2&gt;Domain-driven design and Agile Integration&lt;/h2&gt; &lt;p&gt;&lt;b&gt;Domain-driven design (DDD)&lt;/b&gt; principles apply to the way we develop applications in cloud-native world, by allowing better communication between business users and developers, modeling objects according to the domain, and setting &lt;i&gt;boundaries&lt;/i&gt; to segment the complex business requirement. An important aspect of DDD is continuous integration.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Agile Integration&lt;/b&gt; evolved from the basic concept of microservices and DDD. In software development other than modeling the business logic, many other factors also need to be taken into account. Agile integration on top of DDD helps you better define not only the model and the boundaries but also how they should be separated by different functional concerns and how they can be physically deployed. There are three main responsibilities for agile integration:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;b&gt;Core — &lt;/b&gt;The majority of the microservice that implements business logic or domain capability belongs to this category. They are a good example of typical small simple microservices that are lightweight in both runtime and how it communicates to each other.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Composite — &lt;/b&gt;Setting the right granularity of the service, handling transactions, orchestrating, and transforming data for various types of events are all handled here. Aggregation and separation of data and events are done in this category. This acts as the simple stateless pipe that directs the events from one point to another in the desired and suitable format and sometimes needs to be the gateway to external SaaS, brownfield application or even services outside the bounded context.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Control and dispatch — &lt;/b&gt;If the system only interacts with a handful of external systems, you may not need this category. This category allows you to have more insight and meaningful business control over the services your system provides. It&amp;#8217;s a place to hide the constant bothersome customization from external client requests that require quick and ad hoc changes. Facade pattern applies in this category.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Applying the above principles will allow you to:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Capture the model and entities from the business requirement.&lt;/li&gt; &lt;li&gt;Set the boundaries between business domains.&lt;/li&gt; &lt;li&gt;Categorize the nature of the code and separate it into independent, separate, deployable microservice instances.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Another important fundamental problem is the communication between these microservices. I believe the communication backbone of these microservices should mostly be event-driven and asynchronous, so the distribution of data can be loosely coupled, and the system will become reactive. A drawback is that this type of design can make transactions rather complicated, but this can be overcome by implementing techniques like event sourcing. For communication between boundaries or external clients/partners, I strongly suggest using API simply because:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Most of these processes are in the form of request and reply, which is the natural default behavior of REST API.&lt;/li&gt; &lt;li&gt;Contract definition and repository management technology are more mature in the API space.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Next time, I will talk about different types of data in the events and how to handle them, as well as how to achieve data consistency in the cloud-native application environment. I&amp;#8217;ll also look at all the other layers in my cloud-native application overview: service scaling, application network, and container orchestration platform.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F02%2Fintroduction-to-cloud-native-application-environment-architecture%2F&amp;#38;linkname=Introduction%20to%20cloud-native%20application%20environment%20architecture" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F02%2Fintroduction-to-cloud-native-application-environment-architecture%2F&amp;#38;linkname=Introduction%20to%20cloud-native%20application%20environment%20architecture" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F02%2Fintroduction-to-cloud-native-application-environment-architecture%2F&amp;#38;linkname=Introduction%20to%20cloud-native%20application%20environment%20architecture" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F02%2Fintroduction-to-cloud-native-application-environment-architecture%2F&amp;#38;linkname=Introduction%20to%20cloud-native%20application%20environment%20architecture" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F02%2Fintroduction-to-cloud-native-application-environment-architecture%2F&amp;#38;linkname=Introduction%20to%20cloud-native%20application%20environment%20architecture" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F02%2Fintroduction-to-cloud-native-application-environment-architecture%2F&amp;#38;linkname=Introduction%20to%20cloud-native%20application%20environment%20architecture" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F02%2Fintroduction-to-cloud-native-application-environment-architecture%2F&amp;#38;linkname=Introduction%20to%20cloud-native%20application%20environment%20architecture" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F02%2Fintroduction-to-cloud-native-application-environment-architecture%2F&amp;#038;title=Introduction%20to%20cloud-native%20application%20environment%20architecture" data-a2a-url="https://developers.redhat.com/blog/2019/07/02/introduction-to-cloud-native-application-environment-architecture/" data-a2a-title="Introduction to cloud-native application environment architecture"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/02/introduction-to-cloud-native-application-environment-architecture/"&gt;Introduction to cloud-native application environment architecture&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/o9LLSQCvgkw" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Cloud-native environment architecture can be challenging to understand. To help make sense of it for application developers and software/system architects,  I will attempt to explain the various parts and how they work together. Toward this end, I find it helpful to think about the architecture in four separate layers: application software development, service scaling, application [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/02/introduction-to-cloud-native-application-environment-architecture/"&gt;Introduction to cloud-native application environment architecture&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/07/02/introduction-to-cloud-native-application-environment-architecture/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">604597</post-id><dc:creator>Christina Lin</dc:creator><dc:date>2019-07-02T07:00:59Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/02/introduction-to-cloud-native-application-environment-architecture/</feedburner:origLink></entry><entry><title>JBoss Editorial (July 1st): Streaming, Transactions, Monitoring and more</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/rkeTUH_C92s/jboss-editorial-july-1st-streaming-transactions-monitoring-and-more" /><category term="amq streams" scheme="searchisko:content:tags" /><category term="Camel" scheme="searchisko:content:tags" /><category term="Decision Manager" scheme="searchisko:content:tags" /><category term="Elytron" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_weeklyeditorial" scheme="searchisko:content:tags" /><category term="grafana" scheme="searchisko:content:tags" /><category term="hal" scheme="searchisko:content:tags" /><category term="Hibernate" scheme="searchisko:content:tags" /><category term="jBPM" scheme="searchisko:content:tags" /><category term="Kafka" scheme="searchisko:content:tags" /><category term="narayana" scheme="searchisko:content:tags" /><category term="news" scheme="searchisko:content:tags" /><category term="prometheus" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><category term="weekly_editorial" scheme="searchisko:content:tags" /><category term="weekly_update" scheme="searchisko:content:tags" /><category term="wildfy" scheme="searchisko:content:tags" /><author><name>Kevin Conner</name></author><id>searchisko:content:id:jbossorg_blog-jboss_editorial_july_1st_streaming_transactions_monitoring_and_more</id><updated>2019-07-01T16:40:14Z</updated><published>2019-07-01T16:40:00Z</published><content type="html">&lt;!-- [DocumentBodyStart:a00b36bc-5b3e-4159-bb21-cb93cd1545bf] --&gt;&lt;div class="jive-rendered-content"&gt;&lt;p&gt;Welcome to another edition of the JBoss Editorial, join me in another trip through the JBoss Communities as we search for exciting developments and news from our projects. &lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Apache Kafka Streaming with Red Hat AMQ Streams&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;In a two part series discussing the development of an Apache Kafka Streams application, Adam walks us through all of the necessary steps to create an application using Red Hat AMQ Streams and the Streams Domain Specific Language.&amp;#160; The first article in the series &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2019/06/17/building-apache-kafka-streams-applications-using-red-hat-amq-streams-part-1/" rel="nofollow"&gt;discusses the creation of a simple containerised example application&lt;/a&gt; which can be used as the building block for the discussion within the second article when Adam shows how to create a &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2019/06/18/building-apache-kafka-streams-applications-using-red-hat-amq-streams-part-2/" rel="nofollow"&gt;more comprehensive pipeline using real world data, the Kafka Stream DSL and the Vertx Kafka client to compose an application which will process the events and visualise the outcome via a javascript dashboard&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Transactions, Object Stores and Expiry Scanners&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Transactions are a feature which ensure applications behave correctly in the face of failures, handling the management of the resources enlisted in the transaction and coordinating their responses to achieve a consistent outcome.&amp;#160; Transactions are conceptually simple to use, however as with swans gracefully swimming the real work takes place under the surface where it's largely invisible to the majority of us.&amp;#160; &lt;a class="jive-link-external-small" href="https://jbossts.blogspot.com/2019/06/expiry-scanners-and-object-store-in.html" rel="nofollow"&gt;The Narayana transaction manager is responsible for providing this feature within the Red Hat Middleware products but how does it work?&amp;#160; What is an Object Store?&amp;#160; How are failures handled?&amp;#160; How does recovery work?&amp;#160; How does expiry work?&amp;#160; Let's find out from Ondra ...&lt;/a&gt;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Monitoring jBPM using Prometheus and Grafana&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;The jBPM 7.21.0.Final release introduced a new Prometheus Kie Server Extension for publishing metrics related to the server and its runtime behaviour, enabling a deeper understanding of the server and the business processes.&amp;#160; In an article on the subject &lt;a class="jive-link-external-small" href="https://mswiderski.blogspot.com/2019/06/jbpm-monitoring-using-prometheus-and.html" rel="nofollow"&gt;Cristiano explains how to enable&amp;#160; this extension, includes a short video showing it in action and provides a docker compose configuration for creating a local setup which you can use as a playground for exploring the integration with these tools&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Securing Web Applications using Elytron&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Web applications deployed to &lt;a class="jive-link-external-small" href="https://wildfly.org/" rel="nofollow"&gt;WildFly&lt;/a&gt; can take advantage of the Elytron integration to require clients authenticate using X.509 certificates, this integration allows the server to not only verify the identity of the client but also use this identity to drive authorization within the application.&amp;#160; In a blog post on the subject &lt;a class="jive-link-blog-small" data-containerId="5158" data-containerType="37" data-objectId="6302" data-objectType="38" href="https://developer.jboss.org/people/fjuma/blog/2019/06/14/using-elytron-certificate-based-authentication-with-authorization#jive_content_id_Twoway_SSL_configuration"&gt;Farah takes us through the steps to generate certificates, configure the server for CLIENT_CERT with mutual authentication and finally demonstrate the feature using a sample application&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Elytron also provides a credential store API/SPI which applications can use to manage the secure storage of credentials, check out Darran's blog post &lt;a class="jive-link-external-small" href="https://darranl.blogspot.com/2019/06/wildfly-elytron-credential-store-apis.html" rel="nofollow"&gt;for more details and an example application showing how it can be used&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Camel Core Decomposition&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;The Camel team are very busy working towards the &lt;a class="jive-link-external-small" href="http://camel.apache.org/" rel="nofollow"&gt;Apache Camel 3&lt;/a&gt; release, with much work already having been done and three milestone releases under their belt.&amp;#160; One of the biggest efforts underway within milestone 4 is the &lt;a class="jive-link-external-small" href="http://www.davsclaus.com/2019/06/apache-camel-3-camel-core-vs-camel-core.html" rel="nofollow"&gt;decomposition of camel-core into smaller modules to allow applications to choose only those components they will need and help to minimise the size of the transitive dependency graph&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Customising the WildFly Console Title&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;The release of &lt;a class="jive-link-external-small" href="https://hal.github.io/releases/" rel="nofollow"&gt;Hal 3.2.0&lt;/a&gt;, part of &lt;a class="jive-link-external-small" href="https://wildfly.org/downloads/" rel="nofollow"&gt;WildFly 17&lt;/a&gt;, now includes an option for customising the title of your console tab allowing you to better differentiate between different servers should you have multiple tabs open.&amp;#160; &lt;a class="jive-link-external-small" href="https://hal.github.io/blog/custom-title/" rel="nofollow"&gt;The new feature relies on two attributes within the management model, the &lt;strong&gt;name&lt;/strong&gt; of the server and the &lt;strong&gt;organization&lt;/strong&gt; it belongs to, which can be composed into the title through the settings page of the console&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Red Hat Decision Manager Workshop Refresh&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;With the release of Red Hat Decision Manager 7.3 Eric Schabell has been revisiting his free online workshop to align its content with the new release.&amp;#160; Eric has now &lt;a class="jive-link-external-small" href="http://www.schabell.org/2019/06/beginners-guide-building-an-online-retail-web-shop-workshop.html" rel="nofollow"&gt;updated the first two labs in the workshop covering the installation and the creation of a new project to be used within subsequent labs&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;JBoss Out and About&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Eric Schabell will be presenting at &lt;a class="jive-link-external-small" href="https://devconf.info/us" rel="nofollow"&gt;DevConf.us&lt;/a&gt; in Boston, an annual, free technology conference sponsored by &lt;a class="jive-link-external-small" href="https://redhat.com/" rel="nofollow"&gt;Red Hat&lt;/a&gt; which will take place from August 17th to 19th.&amp;#160; Eric has three presentations accepted including &lt;a class="jive-link-external-small" href="http://www.schabell.org/2019/06/devconfus-2019-open-source-career-with-automation-integration-acceptances.html" rel="nofollow"&gt;"How to Jump Start Your Career in Open Source", "3 Pitfalls Everyone Ignores with Microservices" and "7 Steps to Expanding Your AppDev Toolbox"&lt;/a&gt;.&amp;#160; Eric will also be in Raleigh, North Carolina for &lt;a class="jive-link-external-small" href="https://www.devopsdays.org/events/2019-raleigh/welcome/" rel="nofollow"&gt;DevOps Days Raleigh&lt;/a&gt; which is taking place from October 1st to 2nd, Eric will be presenting "&lt;a class="jive-link-external-small" href="http://www.schabell.org/2019/07/devops-days-raleigh-2019-devops-heros-accepted.html" rel="nofollow"&gt;DevOps Heroes - Adding Automation Integration to your Toolbox&lt;/a&gt;"&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Eric recently gave a keynote presentation during &lt;a class="jive-link-external-small" href="https://events.redhat.com/profile/form/index.cfm?PKformID=0x51358abcd" rel="nofollow"&gt;Red Hat Tech Day 2019&lt;/a&gt; in Netherlands entitled &lt;a class="jive-link-external-small" href="http://www.schabell.org/2019/06/red-hat-tech-day-2019-open-is-key-to-your-career-slides.html" rel="nofollow"&gt;"Open Key to Your Career"&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;New Releases&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The &lt;a class="jive-link-external-small" href="http://hibernate.org/" rel="nofollow"&gt;hibernate&lt;/a&gt; team have announced the release of&lt;ul&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="http://in.relation.to/2019/06/18/hibernate-search-5-11-2-Final-and-5-10-6-Final/" rel="nofollow"&gt;Hibernate Search 5.11.2.Final and 5.10.6.Final&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="http://in.relation.to/2019/06/24/hibernate-search-6-0-0-Alpha7/" rel="nofollow"&gt;Hibernate Search 6.0.0.Alpha7&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;The &lt;a class="jive-link-external-small" href="https://quarkus.io/" rel="nofollow"&gt;Quarkus&lt;/a&gt; team have announced the release of &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2019/06/25/quarkus-0-17-0-now-available/" rel="nofollow"&gt;Quarkus 0.17.0&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;That's all for this edition of the JBoss Editorial, please join us next time when we will take another journey through the JBoss communities in search of more news and articles.&lt;/p&gt;&lt;/div&gt;&lt;!-- [DocumentBodyEnd:a00b36bc-5b3e-4159-bb21-cb93cd1545bf] --&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/rkeTUH_C92s" height="1" width="1" alt=""/&gt;</content><summary>Welcome to another edition of the JBoss Editorial, join me in another trip through the JBoss Communities as we search for exciting developments and news from our projects.   Apache Kafka Streaming with Red Hat AMQ Streams   In a two part series discussing the development of an Apache Kafka Streams application, Adam walks us through all of the necessary steps to create an application using Red Hat ...</summary><dc:creator>Kevin Conner</dc:creator><dc:date>2019-07-01T16:40:00Z</dc:date><feedburner:origLink>https://developer.jboss.org/blogs/weekly-editorial/2019/07/01/jboss-editorial-july-1st-streaming-transactions-monitoring-and-more</feedburner:origLink></entry><entry><title>Shenandoah GC in JDK 13, Part 3: Architectures and operating systems</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/gjn0tpjng00/" /><category term="Java" /><category term="developer" /><author><name>Roman Kennke</name></author><id>https://developers.redhat.com/blog/?p=606497</id><updated>2019-07-01T07:00:43Z</updated><published>2019-07-01T07:00:43Z</published><content type="html">&lt;p&gt;In this series, I&amp;#8217;ve been covering new developments of &lt;a href="https://developers.redhat.com/videos/youtube/N0JTvyCxiv8/"&gt;Shenandoah GC&lt;/a&gt; coming up in &lt;a href="https://developers.redhat.com/products/openjdk/overview/"&gt;JDK 13&lt;/a&gt;. In &lt;a href="https://developers.redhat.com/blog/?p=602377"&gt;part 1&lt;/a&gt;, I looked at the switch to load reference barriers, and,&lt;a href="https://developers.redhat.com/blog/?p=606477"&gt; in part 2&lt;/a&gt;, I looked at plans for eliminating an extra word per object. In this article, I&amp;#8217;ll look at a new architecture and a new operating system that Shenandoah GC will be working with.&lt;br /&gt; &lt;span id="more-606497"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Solaris&lt;/h2&gt; &lt;p&gt;&lt;a href="https://bell-sw.com/"&gt;BellSoft&lt;/a&gt; &lt;a href="https://mail.openjdk.java.net/pipermail/shenandoah-dev/2019-May/009556.html"&gt;recently contributed a change&lt;/a&gt; that allowed Shenandoah to build and run on Solaris. Shenandoah itself has no operating system-specific code in it; therefore, it&amp;#8217;s relatively easy to port to new operating systems. In this case, it mostly amounts to a batch of fixes to make the Solaris compiler happy, like removing a trailing comma in enums.&lt;/p&gt; &lt;p&gt;One notable gotcha we encountered was with Solaris 10. Contrary to what later versions of Solaris do—and what basically all other relevant operating systems do—Solaris 10 maps user memory to upper address ranges (e.g., to addresses starting with 0xff&amp;#8230; instead of 0x7f). Other operating systems reserve the upper half of the address space to kernel memory.&lt;/p&gt; &lt;p&gt;This approach conflicted with an optimization of Shenandoah&amp;#8217;s task queues, which would encode pointers assuming it has some spare space in the upper address range. It was easy enough to disable via build-time-flag, &lt;a href="https://mail.openjdk.java.net/pipermail/shenandoah-dev/2019-May/009593.html"&gt;and Aleksey Shipilev did&lt;/a&gt; that. &lt;a href="http://hg.openjdk.java.net/jdk/jdk/rev/f2f11d7f7f4e"&gt;The fix&lt;/a&gt; is totally internal to Shenandoah GC and does not affect the representation of Java references in heap. With this change, Shenandoah can be built and run on Solaris 10 and newer (and possibly older, but we haven&amp;#8217;t tried). This is not only interesting for folks who want Shenandoah to run on Solaris, but also for us, because it requires the extra bit of cleanliness to make non-mainline toolchains happy.&lt;/p&gt; &lt;p&gt;The changes for Solaris support are already in JDK 13 development repositories and are already backported to Shenandoah&amp;#8217;s JDK 11 and JDK 8 backports repositories.&lt;/p&gt; &lt;h2&gt;x86_32&lt;/h2&gt; &lt;p&gt;Shenandoah used to support x86_32 in &amp;#8220;passive&amp;#8221; mode a long time ago. This mode relies only on stop-the-world GC to avoid implementing barriers (basically, it runs Degenerated GC all the time). It was an interesting mode to see the footprint numbers that you can get with uncommits and slimmer native pointers with really small microservice-size VMs. This mode was dropped before integration upstream, because many Shenandoah tests expect all heuristics/modes to work properly, and having the rudimentary x86_32 support was breaking tier1 tests. So, we disabled it.&lt;/p&gt; &lt;p&gt;Today, we have significantly simplified runtime interface thanks to &lt;a href="https://developers.redhat.com/blog/?p=602377"&gt;load reference barriers&lt;/a&gt; and &lt;a href="https://developers.redhat.com/blog/?p=606477"&gt;elimination of separate forwarding pointer slo&lt;/a&gt;t, and we can build the fully concurrent x86_32 on top of that. This approach allows us to maintain 32-bit cleanness in Shenandoah code (we have fixed &amp;#62;5 bugs ahead of this change!), and it serves as proof of concept that Shenandoah can be implemented on 32-bit platforms. It is interesting in scenarios where the extra footprint savings are important, such as in containers or embedded systems. The combination of LRB + no more forwarding pointer + 32-bit support gives us the current lowest bounds for a footprint that would be possible with Shenandoah.&lt;/p&gt; &lt;p&gt;The changes for x86_32-bit support are done and ready to be integrated into JDK 13. However, they are currently waiting for the elimination of forwarding pointer change, which in turn is waiting for a nasty C2 bug fix. The plan is to later backport it to Shenandoah JDK 11 and JDK 8 backports, after the load reference barriers and elimination of forwarding pointer changes have been backported.&lt;/p&gt; &lt;h2&gt;Other architectures and OSes&lt;/h2&gt; &lt;p&gt;With those two additions to OS and architectures support, Shenandoah will soon be available (e.g., known to build and run) on four operating systems: Linux, Windows, MacOS, and Solaris, plus three architectures: x86_64, arm64 and x86_32. Given Shenandoah&amp;#8217;s design with zero OS-specific code, and not overly complex architecture-specific code, we may be looking at more operating systems or architectures to join the flock in future releases (if anybody finds it interesting enough to implement).&lt;/p&gt; &lt;p&gt;As always, if you don’t want to wait for releases, you can already have everything and help sort out problems: check out &lt;a href="https://wiki.openjdk.java.net/display/shenandoah/Main"&gt;the Shenandoah GC Wiki&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Read more&lt;/h3&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/?p=602377"&gt;Shenandoah GC in JDK 13, Part 1: Load reference barriers&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/?p=606477"&gt;Shenandoah GC in JDK 13, Part 2: Eliminating the forward pointer word&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F01%2Fshenandoah-gc-in-jdk-13-part-3-architectures-and-operating-systems%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2013%2C%20Part%203%3A%20Architectures%20and%20operating%20systems" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F01%2Fshenandoah-gc-in-jdk-13-part-3-architectures-and-operating-systems%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2013%2C%20Part%203%3A%20Architectures%20and%20operating%20systems" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F01%2Fshenandoah-gc-in-jdk-13-part-3-architectures-and-operating-systems%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2013%2C%20Part%203%3A%20Architectures%20and%20operating%20systems" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F01%2Fshenandoah-gc-in-jdk-13-part-3-architectures-and-operating-systems%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2013%2C%20Part%203%3A%20Architectures%20and%20operating%20systems" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F01%2Fshenandoah-gc-in-jdk-13-part-3-architectures-and-operating-systems%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2013%2C%20Part%203%3A%20Architectures%20and%20operating%20systems" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F01%2Fshenandoah-gc-in-jdk-13-part-3-architectures-and-operating-systems%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2013%2C%20Part%203%3A%20Architectures%20and%20operating%20systems" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F01%2Fshenandoah-gc-in-jdk-13-part-3-architectures-and-operating-systems%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2013%2C%20Part%203%3A%20Architectures%20and%20operating%20systems" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F01%2Fshenandoah-gc-in-jdk-13-part-3-architectures-and-operating-systems%2F&amp;#038;title=Shenandoah%20GC%20in%20JDK%2013%2C%20Part%203%3A%20Architectures%20and%20operating%20systems" data-a2a-url="https://developers.redhat.com/blog/2019/07/01/shenandoah-gc-in-jdk-13-part-3-architectures-and-operating-systems/" data-a2a-title="Shenandoah GC in JDK 13, Part 3: Architectures and operating systems"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/01/shenandoah-gc-in-jdk-13-part-3-architectures-and-operating-systems/"&gt;Shenandoah GC in JDK 13, Part 3: Architectures and operating systems&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/gjn0tpjng00" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;In this series, I&amp;#8217;ve been covering new developments of Shenandoah GC coming up in JDK 13. In part 1, I looked at the switch to load reference barriers, and, in part 2, I looked at plans for eliminating an extra word per object. In this article, I&amp;#8217;ll look at a new architecture and a new operating system that [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/01/shenandoah-gc-in-jdk-13-part-3-architectures-and-operating-systems/"&gt;Shenandoah GC in JDK 13, Part 3: Architectures and operating systems&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/07/01/shenandoah-gc-in-jdk-13-part-3-architectures-and-operating-systems/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">606497</post-id><dc:creator>Roman Kennke</dc:creator><dc:date>2019-07-01T07:00:43Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/01/shenandoah-gc-in-jdk-13-part-3-architectures-and-operating-systems/</feedburner:origLink></entry><entry><title>DevOps Days Raleigh 2019: DevOps Heroes Workshop Accepted</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/b1gj3vS3XFI/devops-days-raleigh-2019-devops-heros-accepted.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="conference" scheme="searchisko:content:tags" /><category term="event" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="Process Automation Manager" scheme="searchisko:content:tags" /><category term="workshops" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-devops_days_raleigh_2019_devops_heroes_workshop_accepted</id><updated>2019-07-01T05:00:10Z</updated><published>2019-07-01T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="background-color: white; clear: both; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px; text-align: center;"&gt;&lt;a href="https://www.devopsdays.org/events/2019-raleigh/welcome/" imageanchor="1" style="clear: left; color: #3778cd; float: left; margin-bottom: 1em; margin-right: 1em;" target="_blank"&gt;&lt;img alt="DevOps Days" border="0" data-original-height="174" data-original-width="700" height="79" src="https://2.bp.blogspot.com/-vgmNxmBmOmA/XH1mxi-J11I/AAAAAAAAtfs/drIxSJOyDCo0imTBzaWl0sJQUw722dT4ACLcBGAs/s320/Screenshot%2B2019-03-04%2Bat%2B18.54.11.png" style="background: transparent; border-radius: 0px; border: 1px solid transparent; box-shadow: rgba(0, 0, 0, 0.2) 0px 0px 0px; padding: 8px; position: relative;" title="" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span style="background-color: white; color: #444444; font-family: &amp;quot;arial&amp;quot; , &amp;quot;tahoma&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;freesans&amp;quot; , sans-serif; font-size: 13px;"&gt;&lt;a href="https://www.schabell.org/2019/04/devops-days-raleigh-2019-devops-heros.html" target="_blank"&gt;Previously I posted&lt;/a&gt; about submitting a workshop to the&amp;nbsp;&lt;/span&gt;&lt;a href="https://www.devopsdays.org/events/2019-raleigh/welcome/" style="background-color: white; color: #4d469c; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px; text-decoration-line: none;" target="_blank"&gt;DevOps Days Raleigh&amp;nbsp;&lt;/a&gt;&lt;span style="background-color: white; color: #444444; font-family: &amp;quot;arial&amp;quot; , &amp;quot;tahoma&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;freesans&amp;quot; , sans-serif; font-size: 13px;"&gt;from 1-2 Oct 2019.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="background-color: white; color: #444444; font-family: &amp;quot;arial&amp;quot; , &amp;quot;tahoma&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;freesans&amp;quot; , sans-serif; font-size: 13px;"&gt;While thinking about how to leverage automation integration across organizations for more than just CI/CD and infrastructure automation, this workshop was born.&lt;/span&gt;&lt;br /&gt;&lt;br style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;" /&gt;&lt;span style="background-color: white; color: #444444; font-family: &amp;quot;arial&amp;quot; , &amp;quot;tahoma&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;freesans&amp;quot; , sans-serif; font-size: 13px;"&gt;It's a perfect chance to test out some of my theories, so I was really happy to get an acceptance letter last week and I'll be in Raleigh, NC to present the following workshop on Oct 1-2:&lt;/span&gt;&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;" /&gt;&lt;br /&gt;&lt;h3 style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; margin: 0px; position: relative;"&gt;DevOps Heroes - Adding Automation Integration to your Toolbox&lt;/h3&gt;&lt;div style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;div&gt;&lt;i&gt;DevOps is more than the process of automating your CI/CD pipelines to generate code and deployment artifacts for production. It's also about organizational change and integration of many subtle processes that help you to deliver applications seamlessly from development to production through your operations.&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://www.devopsdays.org/events/2019-raleigh/welcome/" imageanchor="1" style="clear: right; color: #4d469c; float: right; margin-bottom: 1em; margin-left: 1em; text-decoration-line: none;" target="_blank"&gt;&lt;img alt="DevOps Days" border="0" data-original-height="700" data-original-width="738" height="189" src="https://1.bp.blogspot.com/-FIa5Yx-TuM8/XH1o2SwpWNI/AAAAAAAAtf4/CIaDAo2_NYk9BsZytIj8QhXdJnZywv6qACLcBGAs/s200/Screenshot%2B2019-03-04%2Bat%2B19.04.53.png" style="background: transparent; border-radius: 0px; border: 1px solid transparent; box-shadow: rgba(0, 0, 0, 0.2) 0px 0px 0px; padding: 8px; position: relative;" title="" width="200" /&gt;&lt;/a&gt;&lt;i&gt;Let's unlock the power of process integration with a hands-on workshop using your own devices (laptops). We'll take you through the integration of an organizational process as part of your DevOps strategy. Step-by-step you'll build a domain model, creating an automated process, integrating user approval tasks and more using modern open source process automation tooling.&amp;nbsp;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;Bring your laptop as this is a hands on experience that takes you from nothing to a fully working DevOps supporting automation integration project. No experience in automation integration is required. Let's add a new tool to your development toolbox and get you jump started on automation integration that's supporting your organizations DevOps activities.&lt;/i&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;i&gt;(90 minute workshop format with bring your own device)&lt;/i&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;Hope to see you all there!&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ScEm-_VlLIA:iy_QSevmLhQ:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ScEm-_VlLIA:iy_QSevmLhQ:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ScEm-_VlLIA:iy_QSevmLhQ:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=ScEm-_VlLIA:iy_QSevmLhQ:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ScEm-_VlLIA:iy_QSevmLhQ:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=ScEm-_VlLIA:iy_QSevmLhQ:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ScEm-_VlLIA:iy_QSevmLhQ:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=ScEm-_VlLIA:iy_QSevmLhQ:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ScEm-_VlLIA:iy_QSevmLhQ:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ScEm-_VlLIA:iy_QSevmLhQ:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=ScEm-_VlLIA:iy_QSevmLhQ:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/ScEm-_VlLIA" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/b1gj3vS3XFI" height="1" width="1" alt=""/&gt;</content><summary>Previously I posted about submitting a workshop to the DevOps Days Raleigh from 1-2 Oct 2019. While thinking about how to leverage automation integration across organizations for more than just CI/CD and infrastructure automation, this workshop was born. It's a perfect chance to test out some of my theories, so I was really happy to get an acceptance letter last week and I'll be in Raleigh, NC to ...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2019-07-01T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/ScEm-_VlLIA/devops-days-raleigh-2019-devops-heros-accepted.html</feedburner:origLink></entry><entry><title>Shenandoah GC in JDK 13, Part 2: Eliminating the forward pointer word</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/F6nuuTjd3jY/" /><category term="Java" /><category term="developer" /><author><name>Roman Kennke</name></author><id>https://developers.redhat.com/blog/?p=606477</id><updated>2019-06-28T07:00:52Z</updated><published>2019-06-28T07:00:52Z</published><content type="html">&lt;p&gt;In this series of articles, I&amp;#8217;ll be discussing new developments of &lt;a href="https://developers.redhat.com/videos/youtube/N0JTvyCxiv8/"&gt;Shenandoah GC&lt;/a&gt; coming up in &lt;a href="https://developers.redhat.com/products/openjdk/overview/"&gt;JDK 13&lt;/a&gt;. In &lt;a href="https://developers.redhat.com/blog/?p=602377"&gt;part 1&lt;/a&gt;, I looked at the switch of Shenandoah&amp;#8217;s barrier model to load reference barriers and what that means.&lt;/p&gt; &lt;p&gt;The change I want to talk about here addresses another frequent—perhaps the most frequent—concern about Shenandoah GC: the need for an extra word per object. Many believe this is a core requirement for Shenandoah, but it is actually not, as you&amp;#8217;ll see below.&lt;/p&gt; &lt;p&gt;Let&amp;#8217;s first look at the usual object layout of an object in the Hotspot JVM:&lt;/p&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;0:&lt;/td&gt; &lt;td&gt;[mark-word ]&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;8:&lt;/td&gt; &lt;td&gt;[class-word ]&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;16:&lt;/td&gt; &lt;td&gt;[field 1 ]&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;24:&lt;/td&gt; &lt;td&gt;[field 3 ]&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;32:&lt;/td&gt; &lt;td&gt;[field 3 ]&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;Each section here marks a &lt;em&gt;heap word&lt;/em&gt;. That would be 64 bits on 64-bit architectures and 32 bits on 32-bit architectures.&lt;/p&gt; &lt;p&gt;The first word is the so-called &lt;em&gt;mark word&lt;/em&gt;, or header of the object. It is used for a variety of purposes. For example, it can keep the hash-code of an object; it has 3 bits that are used for various locking states; some GCs use it to track object age and marking status; and it can be &amp;#8220;overlaid&amp;#8221; with a pointer to the &amp;#8220;displaced&amp;#8221; mark, to an &amp;#8220;inflated&amp;#8221; lock, or, during GC, the forwarding pointer.&lt;/p&gt; &lt;p&gt;The second word is reserved for the &lt;em&gt;klass pointer&lt;/em&gt;. This is simply a pointer to the Hotspot-internal data structure that represents the class of the object.&lt;/p&gt; &lt;p&gt;Arrays would have an additional word next to store the array length. What follows is the actual payload of the object, that is, fields and array elements.&lt;/p&gt; &lt;p&gt;When running with Shenandoah enabled, the layout would look like this instead:&lt;/p&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;-8:&lt;/td&gt; &lt;td&gt;[fwd pointer]&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;0:&lt;/td&gt; &lt;td&gt;[mark-word ]&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;8:&lt;/td&gt; &lt;td&gt;[class-word ]&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;16:&lt;/td&gt; &lt;td&gt;[field 1 ]&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;24:&lt;/td&gt; &lt;td&gt;[field 3 ]&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;32:&lt;/td&gt; &lt;td&gt;[field 3 ]&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;The forward pointer is used for Shenandoah&amp;#8217;s concurrent evacuation protocol:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Normally, it points to itself -&amp;#62; the object is not evacuated yet.&lt;/li&gt; &lt;li&gt;When evacuating (by the GC or via a write-barrier), we first copy the object, then install a new forwarding pointer to that copy using an atomic compare-and-swap, possibly yielding a pointer to an offending copy. Only one copy wins.&lt;/li&gt; &lt;li&gt;Now, the canonical copy to read-from or write-to can be found simply by reading this forwarding pointer.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The advantage of this protocol is that it&amp;#8217;s simple and cheap. The cheap aspect is important here, because, remember, Shenandoah needs to resolve the forwardee for every single read or write, even primitive ones. And, using this protocol, the read-barrier for this would be a single instruction:&lt;/p&gt; &lt;pre&gt;mov %rax, (%rax, -8)&lt;/pre&gt; &lt;p&gt;That&amp;#8217;s about as simple as it gets.&lt;/p&gt; &lt;p&gt;The disadvantage is obviously that it requires more memory. In the worst case, for objects without any payload, that&amp;#8217;s one more word for an otherwise two-word object. That&amp;#8217;s 50% more. With more realistic object size distributions, you&amp;#8217;d still end up with 5%-10% more overhead, YMMV. This also results in reduced performance: allocating the same number of objects would hit the ceiling faster than without that overhead—prompting GCs more often—and thus reduce throughput.&lt;/p&gt; &lt;p&gt;If you&amp;#8217;ve read carefully so far, you will have noticed that the mark word is also used/overlaid by some GCs to carry the forwarding pointer. So, why not do the same in Shenandoah? The answer is (or used to be), that reading the forwarding pointer required a little more work. We need to somehow distinguish a true mark word from a forwarding pointer. That is done by setting the lowest two bits in the mark word. Those are usually used as locking bits, but the combination 0b11 is not a legal combination of lock bits. In other words, when they are set, the mark word, with the lowest bits masked to 0, is to be interpreted as the forwarding pointer. This decoding of the mark word is significantly more complex than the above simple read of the forwarding pointer. I did in fact &lt;a href="https://twitter.com/rkennke/status/1076532471880212481"&gt;build a prototype a while ago&lt;/a&gt;, and the additional cost of the read-barriers was prohibitive and did not justify the savings.&lt;/p&gt; &lt;p&gt;All of this changed with the recent arrival of load &lt;a href="https://rkennke.wordpress.com/2019/05/15/shenandoah-gc-in-jdk13-part-i-load-reference-barriers/"&gt;reference barriers&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;We no longer require read-barriers, especially not on (very frequent) primitive reads.&lt;/li&gt; &lt;li&gt;The load-reference-barriers are conditional, which means their slow-path (actual resolution) is only activated when 1. GC is active and 2. the object in question is in the collection set. This is fairly infrequent. Compare that to the previous read-barriers which would be always-on.&lt;/li&gt; &lt;li&gt;We no longer allow any access to from-space copies. The strong invariant guarantees that we only ever read from and write to to-space copies.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Two consequences are as follows. The from-space copy is not actually used for anything, and we can use that space for the forwarding pointer, instead of reserving an extra word for it. We can basically nuke the whole contents of the from-space copy and put the forwarding pointer anywhere. We only need to be able to distinguish between &amp;#8220;not forwarded&amp;#8221; (and we don&amp;#8217;t care about other contents) and &amp;#8220;forwarded&amp;#8221; (the rest is forwarding pointer).&lt;/p&gt; &lt;p&gt;It also means that the actual mid- and slow-paths of the load reference barriers are not all that hot, and we can easily afford to do a little bit of decoding there. It amounts to something like (in pseudocode):&lt;/p&gt; &lt;pre&gt;oop decode_forwarding(oop obj) { mark m = obj-&amp;#62;load_mark(); if ((m &amp;#38; 0b11) == 0b11) { return (oop) (m &amp;#38; ~0b11); } else { return obj; } }&lt;/pre&gt; &lt;p&gt;While this looks noticeably more complicated than the simple load of the forwarding pointer, it is still basically a free lunch because it&amp;#8217;s only ever executed in the not-very-hot mid-path of the load reference barrier. With this, the new object layout would be:&lt;/p&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;0:&lt;/td&gt; &lt;td&gt;[mark word (or fwd pointer)]&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;8:&lt;/td&gt; &lt;td&gt;[class word]&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;16:&lt;/td&gt; &lt;td&gt;[field 1]&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;24:&lt;/td&gt; &lt;td&gt;[field 2]&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;32:&lt;/td&gt; &lt;td&gt;[field 3]&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;This approach has several advantages:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Obviously, it reduces Shenandoah&amp;#8217;s memory footprint by doing away with the extra word.&lt;/li&gt; &lt;li&gt;Not quite as obviously, it results in increased throughput: We can now allocate more objects before hitting the GC trigger, resulting in fewer cycles spent in actual GC.&lt;/li&gt; &lt;li&gt;Objects are packed more tightly, which results in improved CPU cache pressure.&lt;/li&gt; &lt;li&gt;Again, the required GC interfaces are simpler: Where we needed special implementations of the allocation paths (to reserve and initialize the extra word), we can now use the same allocation code as any other GC.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To give you an idea of the throughput improvements, note that all the GC sensitive benchmarks that I have tried showed gains between 10% and 15%. Others benefited less or not at all, but that is not surprising for benchmarks that don&amp;#8217;t do any GC at all.&lt;/p&gt; &lt;p&gt;It is, however, important to note that the extra decoding cost does not actually show up anywhere; it is basically negligible. It probably would show up on heavily evacuating workloads, but most applications don&amp;#8217;t evacuate that much, and most of the work is done by GC threads anyway, making mid-path decoding cheap enough.&lt;/p&gt; &lt;p&gt;The implementation of this has &lt;a href="https://mail.openjdk.java.net/pipermail/shenandoah-dev/2019-May/009480.html"&gt;recently been pushed&lt;/a&gt; to the &lt;a href="http://hg.openjdk.java.net/shenandoah/jdk"&gt;Shenandoah/JDK&lt;/a&gt; repository. We are currently shaking out one last known bug, and then it will be ready to go upstream into JDK 13 repository. The plan is to eventually backport it to Shenandoah&amp;#8217;s JDK 11 and JDK 8 backports repositories, and from there into RPMs. If you don&amp;#8217;t want to wait, you can already have it: check out &lt;a href="https://wiki.openjdk.java.net/display/shenandoah/Main"&gt;the Shenandoah GC Wiki&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Read more&lt;/h3&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/?p=602377"&gt;Shenandoah GC in JDK 13, Part 1: Load reference barriers&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/?p=606497"&gt;Shenandoah GC in JDK 13, Part 3: Architectures and operating systems&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F06%2F28%2Fshenandoah-gc-in-jdk-13-part-2-eliminating-the-forward-pointer-word%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2013%2C%20Part%202%3A%20Eliminating%20the%20forward%20pointer%20word" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F06%2F28%2Fshenandoah-gc-in-jdk-13-part-2-eliminating-the-forward-pointer-word%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2013%2C%20Part%202%3A%20Eliminating%20the%20forward%20pointer%20word" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F06%2F28%2Fshenandoah-gc-in-jdk-13-part-2-eliminating-the-forward-pointer-word%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2013%2C%20Part%202%3A%20Eliminating%20the%20forward%20pointer%20word" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F06%2F28%2Fshenandoah-gc-in-jdk-13-part-2-eliminating-the-forward-pointer-word%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2013%2C%20Part%202%3A%20Eliminating%20the%20forward%20pointer%20word" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F06%2F28%2Fshenandoah-gc-in-jdk-13-part-2-eliminating-the-forward-pointer-word%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2013%2C%20Part%202%3A%20Eliminating%20the%20forward%20pointer%20word" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F06%2F28%2Fshenandoah-gc-in-jdk-13-part-2-eliminating-the-forward-pointer-word%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2013%2C%20Part%202%3A%20Eliminating%20the%20forward%20pointer%20word" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F06%2F28%2Fshenandoah-gc-in-jdk-13-part-2-eliminating-the-forward-pointer-word%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2013%2C%20Part%202%3A%20Eliminating%20the%20forward%20pointer%20word" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F06%2F28%2Fshenandoah-gc-in-jdk-13-part-2-eliminating-the-forward-pointer-word%2F&amp;#038;title=Shenandoah%20GC%20in%20JDK%2013%2C%20Part%202%3A%20Eliminating%20the%20forward%20pointer%20word" data-a2a-url="https://developers.redhat.com/blog/2019/06/28/shenandoah-gc-in-jdk-13-part-2-eliminating-the-forward-pointer-word/" data-a2a-title="Shenandoah GC in JDK 13, Part 2: Eliminating the forward pointer word"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/06/28/shenandoah-gc-in-jdk-13-part-2-eliminating-the-forward-pointer-word/"&gt;Shenandoah GC in JDK 13, Part 2: Eliminating the forward pointer word&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/F6nuuTjd3jY" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;In this series of articles, I&amp;#8217;ll be discussing new developments of Shenandoah GC coming up in JDK 13. In part 1, I looked at the switch of Shenandoah&amp;#8217;s barrier model to load reference barriers and what that means. The change I want to talk about here addresses another frequent—perhaps the most frequent—concern about Shenandoah GC: the need [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/06/28/shenandoah-gc-in-jdk-13-part-2-eliminating-the-forward-pointer-word/"&gt;Shenandoah GC in JDK 13, Part 2: Eliminating the forward pointer word&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/06/28/shenandoah-gc-in-jdk-13-part-2-eliminating-the-forward-pointer-word/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">606477</post-id><dc:creator>Roman Kennke</dc:creator><dc:date>2019-06-28T07:00:52Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/06/28/shenandoah-gc-in-jdk-13-part-2-eliminating-the-forward-pointer-word/</feedburner:origLink></entry><entry><title>Custom Title</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/cAS0mjkbsaU/" /><category term="feed_group_name_wildfly" scheme="searchisko:content:tags" /><category term="feed_name_hal" scheme="searchisko:content:tags" /><author><name>Harald Pehl</name></author><id>searchisko:content:id:jbossorg_blog-custom_title0</id><updated>2019-06-27T08:30:25Z</updated><published>2019-06-27T08:30:25Z</published><content type="html">HAL 3.2.0 which is part of Wildfly 17 comes with a new option to customize the title of the browser window / tab. This is especially useful if you have multiple HAL windows open and need to know which console manages which WildFly instance. The new features makes use of two attributes in the root resource of the management model: name: The name of this server. If not set, defaults to the runtime value of InetAddress.&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/cAS0mjkbsaU" height="1" width="1" alt=""/&gt;</content><summary>HAL 3.2.0 which is part of Wildfly 17 comes with a new option to customize the title of the browser window / tab. This is especially useful if you have multiple HAL windows open and need to know which console manages which WildFly instance. The new features makes use of two attributes in the root resource of the management model: name: The name of this server. If not set, defaults to the runtime v...</summary><dc:creator>Harald Pehl</dc:creator><dc:date>2019-06-27T08:30:25Z</dc:date><feedburner:origLink>https://hal.github.io/blog/custom-title/</feedburner:origLink></entry><entry><title>Shenandoah GC in JDK 13, Part 1: Load reference barriers</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/55q1T3NzKBs/" /><category term="Java" /><category term="jdk" /><author><name>Roman Kennke</name></author><id>https://developers.redhat.com/blog/?p=602377</id><updated>2019-06-27T07:00:23Z</updated><published>2019-06-27T07:00:23Z</published><content type="html">&lt;p&gt;In this series of articles, I will introduce some new developments of the &lt;a href="https://developers.redhat.com/videos/youtube/N0JTvyCxiv8/"&gt;Shenandoah GC&lt;/a&gt; coming up in &lt;a href="https://developers.redhat.com/products/openjdk/overview/"&gt;JDK 13&lt;/a&gt;. Perhaps the most significant, although not directly user-visible, change is the switch of Shenandoah&amp;#8217;s barrier model to load reference barriers. This change resolves one major point of criticism against Shenandoah—the expensive primitive read-barriers. Here, I&amp;#8217;ll explain more about what this change means.&lt;/p&gt; &lt;p&gt;&lt;span id="more-602377"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Shenandoah (as well as other collectors) employs barriers to ensure heap consistency. More specifically, Shenandoah GC employs barriers to ensure what we call &amp;#8220;to-space-invariant.&amp;#8221; This means when Shenandoah is collecting, it is copying objects from so-called &amp;#8220;from-space&amp;#8221; to &amp;#8220;to-space,&amp;#8221; and it does so while Java threads are running (concurrently).&lt;/p&gt; &lt;p&gt;Thus, there may be two copies of any object floating around in the JVM. To maintain heap consistency, we need to ensure either that:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;writes happen into to-space copy + reads can happen from both copies, subject to memory model constraints = weak to-space invariant, or that&lt;/li&gt; &lt;li&gt;writes and reads always happen into/from the to-space copy = strong to-space invariant.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The way we ensure this is by employing the corresponding type of barriers whenever reads and writes happen. Consider this pseudocode:&lt;/p&gt; &lt;pre&gt;void example(Foo foo) { Bar b1 = foo.bar; // Read while (..) { Baz baz = b1.baz; // Read b1.x = makeSomeValue(baz); // Write } &lt;/pre&gt; &lt;p&gt;Employing the Shenandoah barriers, it would look like this (what the JVM+GC would do under the hood):&lt;/p&gt; &lt;pre&gt;void example(Foo foo) { Bar b1 = readBarrier(foo).bar; // Read while (..) { Baz baz = readBarrier(b1).baz; // Read X value = makeSomeValue(baz); writeBarrier(b1).x = readBarrier(value); // Write }&lt;/pre&gt; &lt;p&gt;In other words, wherever we read from an object, we first resolve the object via a read-barrier, and wherever we write to an object, we possibly copy the object to to-space. I won&amp;#8217;t go into the details here; let&amp;#8217;s just say that both operations are somewhat costly.&lt;/p&gt; &lt;p&gt;Notice also that we need a read-barrier on the value of the write here to ensure that we only ever write to-space-references into fields while heap references get updated (another nuisance of Shenandoah&amp;#8217;s old barrier model).&lt;/p&gt; &lt;p&gt;Because those barriers are a costly affair, we worked quite hard to optimize them. An important optimization is to hoist barriers out of loops. In this example, we see that b1 is defined outside the loop but only used inside the loop. We can just as well do the barriers outside the loop, once, instead of many times inside the loop:&lt;/p&gt; &lt;pre&gt;void example(Foo foo) { Bar b1 = readBarrier(foo).bar; // Read Bar b1' = readBarrier(b1); Bar b1'' = writeBarrier(b1); while (..) { Baz baz = b1'.baz; // Read X value = makeSomeValue(baz); b1''.x = readBarrier(value); // Write }&lt;/pre&gt; &lt;p&gt;And, because write-barriers are stronger than read-barriers, we can fold the two up:&lt;/p&gt; &lt;pre&gt;void example(Foo foo) { Bar b1 = readBarrier(foo).bar; // Read Bar b1' = writeBarrier(b1); while (..) { Baz baz = b1'.baz; // Read X value = makeSomeValue(baz); b1'.x = readBarrier(value); // Write }&lt;/pre&gt; &lt;p&gt;This is all nice and works fairly well, but it is also troublesome, in that the optimization passes for this are very complex. The fact that both from-space and two-space-copies of any objects can float around the JVM at any time is a major source of headaches and complexity. For example, we need extra barriers for comparing objects in case we compare an object to a different copy of itself. Read-barriers and write-barriers need to be inserted for *any* read or write, including primitive reads or writes, which are very frequent.&lt;/p&gt; &lt;p&gt;So, why not optimize this and strongly ensure to-space-invariance right when an object is loaded from memory? That is where load reference barriers come in. They work mostly like our previous write-barriers, but are not employed at use-sites (when reading from or storing to the object). Instead, they are used much earlier when objects are loaded (at their definition-site):&lt;/p&gt; &lt;pre&gt;void example(Foo foo) { Bar b1' = loadReferenceBarrier(foo.bar); while (..) { Baz baz = loadReferenceBarrier(b1'.baz); // Read X value = makeSomeValue(baz); b1'.x = value; // Write }&lt;/pre&gt; &lt;p&gt;You can see that the code is basically the same as before —after our optimizations—except that we didn&amp;#8217;t need to optimize anything yet. Also, the read-barrier for the store-value is gone, because we now know (because of the strong to-space-invariant) that whatever makeSomeValue() did, it must already have employed the load-reference-barrier if needed. The new load-reference-barrier is almost 100 percent the same as our previous write-barrier.&lt;/p&gt; &lt;p&gt;The advantages of this barrier model are many (for us GC developers):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Strong invariant means it&amp;#8217;s a lot easier to reason about the state of GC and objects.&lt;/li&gt; &lt;li&gt;Much simpler barrier interface. In fact, a lot of stuff that we added to GC barrier interfaces after JDK11 will now become unused: no need for barriers on primitives, no need for object equality barriers, etc.&lt;/li&gt; &lt;li&gt;Optimization is much easier (see above). Barriers are naturally placed at the least-hot locations: their def-sites, instead of their most-hot locations: their use-sites, and then attempted to optimize them away from there (and not always successfully).&lt;/li&gt; &lt;li&gt;No more need for object equals barriers.&lt;/li&gt; &lt;li&gt;No more need for &amp;#8220;resolve&amp;#8221; barriers (a somewhat exotic kind of barriers used mostly in intrinsics and places that do read-like or write-like operations).&lt;/li&gt; &lt;li&gt;All barriers are now conditional, which opens up opportunities for further optimization later.&lt;/li&gt; &lt;li&gt;We can re-enable a bunch of optimizations, like fast JNI getters that needed to be disabled before because they did not play well with possible from-space references.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For users, this change is mostly invisible, but the bottom line is that it improves Shenandoah&amp;#8217;s overall performance. It also opens the way for additional improvements, such as elimination of the forwarding pointer, which I&amp;#8217;ll get to in a follow-up article.&lt;/p&gt; &lt;p&gt;Load reference barriers were &lt;a href="https://bugs.openjdk.java.net/browse/JDK-8221766"&gt;integrated into JDK 13 development repository&lt;/a&gt; in April 2019. We will start backporting it to Shenandoah&amp;#8217;s JDK 11 and JDK 8 backports soon. If you don&amp;#8217;t want to wait, you can already have it: check out &lt;a href="https://wiki.openjdk.java.net/display/shenandoah/Main"&gt;the Shenandoah GC Wiki&lt;/a&gt; for details.&lt;/p&gt; &lt;h3&gt;Read more&lt;/h3&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/?p=606477"&gt;Shenandoah GC in JDK 13, Part 2: Eliminating the forward pointer word&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/?p=606497"&gt;Shenandoah GC in JDK 13, Part 3: Architectures and operating systems&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F06%2F27%2Fshenandoah-gc-in-jdk-13-part-1-load-reference-barriers%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2013%2C%20Part%201%3A%20Load%20reference%20barriers" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F06%2F27%2Fshenandoah-gc-in-jdk-13-part-1-load-reference-barriers%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2013%2C%20Part%201%3A%20Load%20reference%20barriers" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F06%2F27%2Fshenandoah-gc-in-jdk-13-part-1-load-reference-barriers%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2013%2C%20Part%201%3A%20Load%20reference%20barriers" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F06%2F27%2Fshenandoah-gc-in-jdk-13-part-1-load-reference-barriers%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2013%2C%20Part%201%3A%20Load%20reference%20barriers" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F06%2F27%2Fshenandoah-gc-in-jdk-13-part-1-load-reference-barriers%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2013%2C%20Part%201%3A%20Load%20reference%20barriers" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F06%2F27%2Fshenandoah-gc-in-jdk-13-part-1-load-reference-barriers%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2013%2C%20Part%201%3A%20Load%20reference%20barriers" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F06%2F27%2Fshenandoah-gc-in-jdk-13-part-1-load-reference-barriers%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2013%2C%20Part%201%3A%20Load%20reference%20barriers" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F06%2F27%2Fshenandoah-gc-in-jdk-13-part-1-load-reference-barriers%2F&amp;#038;title=Shenandoah%20GC%20in%20JDK%2013%2C%20Part%201%3A%20Load%20reference%20barriers" data-a2a-url="https://developers.redhat.com/blog/2019/06/27/shenandoah-gc-in-jdk-13-part-1-load-reference-barriers/" data-a2a-title="Shenandoah GC in JDK 13, Part 1: Load reference barriers"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/06/27/shenandoah-gc-in-jdk-13-part-1-load-reference-barriers/"&gt;Shenandoah GC in JDK 13, Part 1: Load reference barriers&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/55q1T3NzKBs" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;In this series of articles, I will introduce some new developments of the Shenandoah GC coming up in JDK 13. Perhaps the most significant, although not directly user-visible, change is the switch of Shenandoah&amp;#8217;s barrier model to load reference barriers. This change resolves one major point of criticism against Shenandoah—the expensive primitive read-barriers. Here, I&amp;#8217;ll explain [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/06/27/shenandoah-gc-in-jdk-13-part-1-load-reference-barriers/"&gt;Shenandoah GC in JDK 13, Part 1: Load reference barriers&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/06/27/shenandoah-gc-in-jdk-13-part-1-load-reference-barriers/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">602377</post-id><dc:creator>Roman Kennke</dc:creator><dc:date>2019-06-27T07:00:23Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/06/27/shenandoah-gc-in-jdk-13-part-1-load-reference-barriers/</feedburner:origLink></entry><entry><title>Expiry scanners and object store in Narayana</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/lcRpsz5N1T0/expiry-scanners-and-object-store-in.html" /><category term="feed_group_name_jbosstransactions" scheme="searchisko:content:tags" /><category term="feed_name_transactions" scheme="searchisko:content:tags" /><author><name>Ondra Chaloupka</name></author><id>searchisko:content:id:jbossorg_blog-expiry_scanners_and_object_store_in_narayana</id><updated>2019-06-28T13:36:39Z</updated><published>2019-06-26T17:16:00Z</published><content type="html">&lt;h3&gt;What are the expiry scanners?&lt;/h3&gt;The expiry scanner serves for garbage collection of &lt;i&gt;aged&lt;/i&gt; transaction records in Narayana. &lt;br /&gt;Before elaborating on that statement let's first find out why is such functionality needed. &lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Narayana object store and transaction records&lt;/h3&gt;Narayana creates persistent records when process transactions. These records are saved to the transaction log called Narayana object store. The records are utilized during transaction recovery when a failure of a transaction happens. Usual reasons for the transaction failure is a crash of the JVM or a network connection issue or an internal error on the remote participant. The records are created during the processing of transactions. Then they are removed immediately after the transaction successfully finishes (regardless of the transaction outcome – commit or rollback). That implies that the Narayana log contains only the records of the currently active transactions and the failed ones. The records on active transactions are expected to be removed when the transaction finishes. The records on failed transactions are stored until the time they are recovered – finished by periodic recovery – or by the time they are resolved by human intervention. &lt;br /&gt;...or by the time they are garbage collected by the expiry scanner. &lt;br /&gt;&lt;br /&gt;Narayana stores transaction record in a hierarchical structure. The hierarchy location depends on the &lt;i&gt;type&lt;/i&gt; of record. The object store could be stored on the hard drive – either as a directory structure, or in the journal store (the implementation which is used is created by &lt;a href="https://activemq.apache.org/components/artemis/"&gt;ActiveMQ Artemis project&lt;/a&gt;), or it can be placed to the database via JDBC connection. &lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;i&gt;&lt;b&gt;NOTE:&lt;/b&gt;&lt;/i&gt; Narayana object store saves data about transaction processing, but the same storage is used to persist other runtime data which is expected to survive the crash of the JVM. &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Object store records for JTA and JTS&lt;/h4&gt;Transaction processing records are stored differently independence whether &lt;a href="https://docs.jboss.org/jbosstm/5.0.0.M1/guides/narayana-jts-development_guide/ch08.html"&gt;JTA or JTS mode&lt;/a&gt; is used. The JTA runs the transactions inside the same JVM. While JTS is designed to support distributed transactions. When JTS is used, the components of the transaction manager are not coupled inside the same JVM. The components communicate with each other via messages, regardless the components run within the same JVM or as different processes or on different nodes. JTS mode saves more transaction processing data to object store than the JTA alternative. &lt;br /&gt;&lt;br /&gt;For standard transaction processing the JTA starts with the enlisting participant under &lt;a href="https://developer.jboss.org/wiki/TwoPhaseCommit2PC"&gt;the global transaction&lt;/a&gt;. Then two-phase commit starts and prepare is called at each participant. When the prepare 2PC phase ends, the record informing about the success of the phase is stored under the object store. After this point, the transaction is predetermined to commit (until that point the rollback would be processed in case of the failure, see &lt;a href="http://narayana.io/docs/project/index.html#_transaction_model"&gt;presumed rollback&lt;/a&gt;). The 2PC commit phase is processed by calling commit on each participant. After this phase ends the record is deleted from the object store. &lt;br /&gt;The &lt;i&gt;prepare&lt;/i&gt; "tombstone record" informs about the success of the phase but contains information on successfully prepared participants which were part of the transaction.&lt;br /&gt;&amp;nbsp; &lt;br /&gt;This is how the transaction object storage looks like after the prepare was successfully processed. The type which represents the JTA tombstone record is &lt;code&gt;StateManager/BasicAction/TwoPhaseCoordinator/AtomiAction&lt;/code&gt;.&lt;br /&gt;&lt;pre&gt;&lt;code class="java"&gt;data/tx-object-store/&lt;br /&gt;ShadowNoFileLockStore&lt;br /&gt;└── defaultStore&lt;br /&gt; ├── EISNAME&lt;br /&gt; │&amp;nbsp;&amp;nbsp; ├── 0_ffff0a000007_6d753eda_5d0f2fd1_34&lt;br /&gt; │&amp;nbsp;&amp;nbsp; └── 0_ffff0a000007_6d753eda_5d0f2fd1_3a&lt;br /&gt; └── StateManager&lt;br /&gt; └── BasicAction&lt;br /&gt; └── TwoPhaseCoordinator&lt;br /&gt; └── AtomicAction&lt;br /&gt; └── 0_ffff0a000007_6d753eda_5d0f2fd1_29&lt;/code&gt;&lt;/pre&gt;In the case of the JTS, the processing runs mostly the same way. But one difference is that the JTS saves more setup data (created once during initialization of transaction manager, see &lt;code&gt;FactoryContact&lt;/code&gt;, &lt;code&gt;RecoveryCoordinator&lt;/code&gt;). Then the second difference to JTA is that &lt;strike&gt;the JTS stores the information about each prepared participant separately&lt;/strike&gt;&amp;nbsp;for JTS the participants are&amp;nbsp;separate entities and each of them handles the persistence on his own. Because of that, a "&lt;i&gt;prepare record&lt;/i&gt;" is created for each participant separately (see Mark's clarification below in comments).&amp;nbsp;&amp;nbsp;When &lt;code&gt;XAResource.prepare&lt;/code&gt; is called there is created a record type &lt;code&gt;CosTransactions/XAResourceRecord&lt;/code&gt;. When the &lt;code&gt;XAResource.commit&lt;/code&gt; is called then the record is deleted. After the &lt;a href="https://developer.jboss.org/wiki/TwoPhaseCommit2PC"&gt;2PC prepare&lt;/a&gt; is successfully finished the record &lt;code&gt;StateManager/BasicAction/TwoPhaseCoordinator/ArjunaTransactionImple&lt;/code&gt; is created and is removed when the 2PC commit phase is finished. The record &lt;code&gt;ArjunaTransactionImple&lt;/code&gt; is the &lt;i&gt;prepare&lt;/i&gt; "tombstone record" for JTS. &lt;br /&gt;Take a look at how the object store with two participants and finished 2PC prepare phase looks like&lt;br /&gt;&lt;pre&gt;&lt;code class="java"&gt;data/tx-object-store/&lt;br /&gt;ShadowNoFileLockStore&lt;br /&gt;└── defaultStore&lt;br /&gt; ├── CosTransactions&lt;br /&gt; │&amp;nbsp;&amp;nbsp; └── XAResourceRecord&lt;br /&gt; │&amp;nbsp;&amp;nbsp; ├── 0_ffff0a000007_-55aeb984_5d0f33c3_4b&lt;br /&gt; │&amp;nbsp;&amp;nbsp; └── 0_ffff0a000007_-55aeb984_5d0f33c3_50&lt;br /&gt; ├── Recovery&lt;br /&gt; │&amp;nbsp;&amp;nbsp; └── FactoryContact&lt;br /&gt; │&amp;nbsp;&amp;nbsp; └── 0_ffff0a000007_-55aeb984_5d0f33c3_15&lt;br /&gt; ├── RecoveryCoordinator&lt;br /&gt; │&amp;nbsp;&amp;nbsp; └── 0_ffff52e38d0c_c91_4140398c_0&lt;br /&gt; └── StateManager&lt;br /&gt; └── BasicAction&lt;br /&gt; └── TwoPhaseCoordinator&lt;br /&gt; └── ArjunaTransactionImple&lt;br /&gt; └── 0_ffff0a000007_-55aeb984_5d0f33c3_41&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;/h4&gt;&lt;h4&gt;Now, what about the failures? &lt;/h4&gt;When the JVM crashes, network error or another transaction error happens the transaction manager stops to process the current transaction. Depending on the type of failure it either abandons the state and passes responsibility to finish the transaction to the periodic recovery manager. That's the case e.g. for the "clean" failures – the JVM crash or the network crash. The periodic recovery starts processing when the system is restarted and/or it periodically retries to connect to the participants to finish the transaction. &lt;br /&gt;Continuing with the object store example above. JVM crashes and further restarts make that periodic recovery to observe the 2PC prepare was finished – there is the &lt;code&gt;AtomicAction/ArjunaTransactionImple&lt;/code&gt; record in the object store. The recovery manager lists the participants (represented with &lt;code&gt;XAResource&lt;/code&gt;s) which were part of the transaction and it tries to commit them. &lt;br /&gt;&lt;br /&gt;&lt;h4&gt; ARJUNA016037: Could not find new XAResource to use for recovering non-serializable XAResource&lt;/h4&gt;Let me make a quick side note to one interesting point in the processing. Interesting at least from the Narayana perspective. &lt;br /&gt;If you are using Narayana transaction manager for some time you are well familiar with the log error message:&lt;br /&gt;&lt;br /&gt;&lt;code&gt; [com.arjuna.ats.jta] (Periodic Recovery) ARJUNA016037: Could not find new XAResource to use for recovering non-serializable XAResource XAResourceRecord &lt;/code&gt;&lt;br /&gt;&lt;br /&gt;This warning means: &lt;i&gt;There was a successful prepared transaction as we can observe the record in the object store. But periodic recovery manager is not capable to find out what is the counterparty participant – e.g. what database or JMS broker the record belongs to.&lt;/i&gt;&lt;br /&gt;This situation happens when the failure (JVM crash) happens in a specific time. That's time just after &lt;code&gt;XAResource.commit&lt;/code&gt; is called. It makes the participant (the remote side - e.g. the database) to remove its knowledge about the transaction from its resource local storage. But at that particular point in time, the transaction record was not yet removed from the Narayana object store. &lt;br /&gt;The JVM crash happened so after the application restarts the periodic recovery can observe a record in the object store. It tries to match such record to the information obtained from the participant's resource local storage (uses &lt;code&gt;XAResource.recover&lt;/code&gt; call).&lt;br /&gt;&amp;nbsp; &lt;br /&gt;As the participant's resource local storage was cleaned there is no information obtained. Now the periodic recovery does see any directly matching information to its record in the object store. &lt;br /&gt;From that said, we can see the periodic recovery complains that there is a participant record which does not contain "connection data" as it's non-serializable. And there is no matching record at the participant's resource local storage. &lt;br /&gt;&lt;br /&gt;&lt;i&gt;&lt;b&gt;NOTE:&lt;/b&gt;&lt;/i&gt; One possibility to get rid of the warning in the log would be to serialize all the information about the participant (serializing the &lt;code&gt;XAResource&lt;/code&gt;). Such serialized participants provide an easy way for the periodic recovery manager to directly call methods on the un-serialized instance (&lt;code&gt;XAResource.recover&lt;/code&gt;). But it would mean to serialize e.g. the &lt;a href="https://docs.oracle.com/javase/8/docs/api/javax/sql/DataSource.html#getConnection--"&gt;JDBC connection&lt;/a&gt; which is hardly possible.&lt;br /&gt;&lt;br /&gt;The description above explains the JTA behaviour. In the case of the JTS, if the transaction manager found a record in the object store which does not match any participant's resource local storage info then the object store record is considered as assumed completed. Such consideration means changing the type of record in the object store. Changing the type means moving the record to a different place in the hierarchical structure of the object store. When the record is moved to an unknown place for the periodic recovery it stops to consider it as a problematic one and it stops to print out warnings to the application log. The record is then saved under &lt;code&gt;ArjunaTransactionImple/AssumedCompleteServerTransaction&lt;/code&gt; in the hierarchical structure. &lt;br /&gt;This conversion of the in-doubt record to the assumed completed one happens by default &lt;a href="https://github.com/jbosstm/narayana/blob/5.9.5.Final/ArjunaJTS/jts/classes/com/arjuna/ats/jts/common/JTSEnvironmentBean.java#L56"&gt;after 3 cycles of recovery&lt;/a&gt;. Changing the number of cycles could be done by providing system property &lt;code&gt;-DJTSEnvironmentBean.commitedTransactionRetryLimit=…&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;br /&gt;&lt;/code&gt; The &lt;code&gt;ARJUNA016037&lt;/code&gt;&amp;nbsp;the warning was a topic in various discussions&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://planet.jboss.org/post/norecoveryxa"&gt;https://planet.jboss.org/post/norecoveryxa&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://developer.jboss.org/wiki/TxNonSerializableXAResource"&gt;https://developer.jboss.org/wiki/TxNonSerializableXAResource&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;The warning is shown again and again in the application log. It's shown each time the periodic recovery is running – as it informs there is a record and I don't know what to do with that.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;i&gt;&lt;b&gt;NOTE:&lt;/b&gt;&lt;/i&gt; The periodic recovery runs &lt;a href="https://github.com/jbosstm/narayana/blob/5.9.5.Final/ArjunaCore/arjuna/classes/com/arjuna/ats/arjuna/common/RecoveryEnvironmentBean.java#L45"&gt;by default&lt;/a&gt; &lt;a href="https://github.com/jbosstm/narayana/blob/5.9.5.Final/ArjunaCore/arjuna/classes/com/arjuna/ats/internal/arjuna/recovery/PeriodicRecovery.java#L948"&gt;every 2 minutes&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Now, what we can do with that?&lt;/h4&gt;&lt;br /&gt;Fortunately, there is an &lt;a href="https://issues.jboss.org/browse/JBTM-860"&gt;enhancement&lt;/a&gt; of the recovery processing in the Narayana for some time already. When the participant driver (ie. resource manager "deployed" in the same JVM) implements &lt;a href="https://github.com/jbosstm/jboss-transaction-spi/blob/7.6.0.Final/src/main/java/org/jboss/tm/XAResourceWrapper.java"&gt;the Narayna SPI XAResourceWrapper&lt;/a&gt; it provides the information what resource is the owner of the participant record. Narayana periodic recovery is then capable to deduce if the orphaned object store record belongs to the particular participant's resource local storage. Then it can assume that the participant committed already its work. Narayana can update its own object store and periodic recovery stops to show the warnings. &lt;br /&gt;&lt;a href="https://github.com/apache/activemq-artemis/blob/2.9.0/artemis-service-extensions/src/main/java/org/apache/activemq/artemis/service/extensions/xa/ActiveMQXAResourceWrapperImpl.java"&gt;An example of the usage of the SPI&lt;/a&gt; is in the Active MQ Artemis RA. &lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Transaction processing failures&lt;/h3&gt;Back to the transaction processing failures &lt;i&gt;(JVM crash, network failure, internal participant error)&lt;/i&gt;. &lt;br /&gt;As mentioned the "clean failures" can be automatically handled by the periodic recovery. But the "clean" failures are not the only ones you can experience. The XA protocol permits a heuristic failure. Those are failures which occurs when the participant does not follow the XA protocol. Such failures are not automatically recoverable by periodic recovery. Human intervention is needed.&lt;br /&gt;&amp;nbsp; &lt;br /&gt;Such failures occur mostly because of an internal error at the remote participant. An example of such failure could be that the transaction manager commands the resource to commit with &lt;code&gt;XAResource.commit&lt;/code&gt; call. But the resource manager responds that it already rolled-back the resource transaction arbitrarily. In such a case, Narayana saves this unexpected state into the object store. The transaction is marked having the heuristic outcome. And the periodic recovery observes the heuristic record in the object store and informs about it during each cycle. &lt;br /&gt;Now, it's the responsibility of the administrator to get an understanding of the transaction state and handle it. &lt;br /&gt;But if he does not process such a transaction for a very long time then... &lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Expiry scanners&lt;/h3&gt;...then we are back at the track to the expiry scanners. &lt;br /&gt;What does mean that a record stays in the object for a very long time?&lt;br /&gt;&lt;br /&gt;The "very long time" is by default &lt;a href="https://github.com/jbosstm/narayana/blob/5.9.5.Final/ArjunaCore/arjuna/classes/com/arjuna/ats/arjuna/common/RecoveryEnvironmentBean.java#L54"&gt;12 hours&lt;/a&gt; for Narayana. It's the default time after when the garbage collection process starts. This garbage collection is the responsibility of the expiry scanners. The purpose is cleaning the object store from the long staying records. When there is a record left in the heuristic state for 12 hours in the object store or there is a record without the matching participant's resource local storage info in the object store then the expiry scanner handles it. The purpose of such handling causes is the periodic recovery stops to observe the existence of such in-doubt participant and subsequently to stop complaining about the existence of the record. &lt;br /&gt;&lt;br /&gt;Handling a record means moving a record to a different place (changing the type of the record and placing the record to a different place in the hierarchical structure) or removing the record completely from the object store. &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Available implementations of the expiry scanner&lt;/h4&gt;For the JTA transaction types, there are following expiry scanners available in Narayana &lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/jbosstm/narayana/blob/5.9.5.Final/ArjunaCore/arjuna/classes/com/arjuna/ats/internal/arjuna/recovery/AtomicActionExpiryScanner.java"&gt;AtomicActionExpiryScanner&lt;/a&gt; : moving records representing the prepared transaction (&lt;code&gt;AtomicAction&lt;/code&gt;) to the inferior hierarchy place named &lt;code&gt;/Expired&lt;/code&gt;. &lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/jbosstm/narayana/blob/5.9.5.Final/ArjunaCore/arjuna/classes/com/arjuna/ats/internal/arjuna/recovery/ExpiredTransactionStatusManagerScanner.java"&gt;ExpiredTransactionStatusManagerScanner&lt;/a&gt; : removing records about connection setup for the status manager. This record is not connected with transaction processing and represents Narayana runtime data. &lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;For the JTS transaction types, there are following expiry scanners available in Narayana &lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/jbosstm/narayana/blob/5.9.5.Final/ArjunaJTS/jts/classes/com/arjuna/ats/internal/jts/recovery/transactions/ExpiredToplevelScanner.java"&gt;ExpiredToplevelScanner&lt;/a&gt; Removing &lt;code&gt;ArjunaTransactionImple/AssumedCompleteTransaction&lt;/code&gt; record from the object store. The &lt;code&gt;AssumedCompleteTransaction&lt;/code&gt; originates from the type &lt;code&gt;ArjunaTransactionImple&lt;/code&gt; and is moved to the assumed type by the JTS periodic recovery processing. &lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/jbosstm/narayana/blob/5.9.5.Final/ArjunaJTS/jts/classes/com/arjuna/ats/internal/jts/recovery/transactions/ExpiredServerScanner.java"&gt;ExpiredServerScanner&lt;/a&gt; Removing &lt;code&gt;ArjunaTransactionImple/AssumedCompleteServerTransaction&lt;/code&gt; record from the object store. The &lt;code&gt;AssumedCompleteServerTransaction&lt;/code&gt; originates from the type &lt;code&gt;ArjunaTransactionImple/ServerTransaction/JCA&lt;/code&gt; and is moved to the assumed type by the JTS periodic recovery processing. &lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/jbosstm/narayana/blob/5.9.5.Final/ArjunaJTS/jts/classes/com/arjuna/ats/internal/jts/recovery/contact/ExpiredContactScanner.java"&gt;ExpiredContactScanner&lt;/a&gt; : Scanner removes the records which let the recovery manager know what Narayana instance belongs to which JVM. This record is not connected with transaction processing and represents Narayana runtime data.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h4&gt;&lt;/h4&gt;&lt;h4&gt;Setup of expiry scanners classes&lt;/h4&gt;&lt;a href="https://jbossts.blogspot.com/2018/01/narayana-periodic-recovery-of-xa.html#configuration"&gt;As explained elsewhere&lt;/a&gt; Narayana can be set up either with system properties passed directly to the Java program or defined in the file descriptor &lt;code&gt;jbossts-properties.xml&lt;/code&gt;. If you run the WildFly application server the system properties can be defined at the command line with &lt;code&gt;-D…&lt;/code&gt; when starting application server with &lt;code&gt;standalone.sh/bat&lt;/code&gt; script. Or they can be persistently added into the &lt;code&gt;bin/standalone.conf&lt;/code&gt; config file. &lt;br /&gt;The class names of the expiry scanners that will be active after Narayana initialization can be defined by property &lt;code&gt;com.arjuna.ats.arjuna.common.RecoveryEnvironmentBean.expiryScannerClassNames&lt;/code&gt; or &lt;code&gt;RecoveryEnvironmentBean.expiryScannerClassNames&lt;/code&gt; (named differently, doing the same service). The property then contains the fully qualified class names of implementation of &lt;code&gt;ExpiryScanner&lt;/code&gt; interface. The class names are separated with space or an empty line. &lt;br /&gt;An example of such settings could be seen &lt;a href="https://github.com/jbosstm/quickstart/blob/5.9.5.Final/agroal/src/main/resources/jbossts-properties.xml#L84"&gt;at Narayana quickstarts&lt;/a&gt;. Or when it should be defined directly here it's &lt;br /&gt;&lt;pre&gt;&lt;code&gt;-DRecoveryEnvironmentBean.expiryScannerClassNames="com.arjuna.ats.internal.arjuna.recovery.ExpiredTransactionStatusManagerScanner com.arjuna.ats.internal.arjuna.recovery.AtomicActionExpiryScanner"&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;i&gt;&lt;b&gt;NOTE:&lt;/b&gt;&lt;/i&gt; when you configure the WildFly app server then you are allowed to use only the shortened property name of &lt;code&gt;-DRecoveryEnvironmentBean.expiryScannerClassNames=…&lt;/code&gt;. The longer variant does not work because of the way the issue &lt;a href="https://issues.jboss.org/browse/WFLY-951"&gt;WFLY-951&lt;/a&gt; was implemented. &lt;br /&gt;&lt;i&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/i&gt;&lt;i&gt;&lt;b&gt;NOTE2:&lt;/b&gt;&lt;/i&gt; when you are running the WildFly app server then the expired scanners enabled by default could be observed by looking into the source code at &lt;a href="https://github.com/wildfly/wildfly/blob/17.0.0.Final/transactions/src/main/java/org/jboss/as/txn/service/ArjunaRecoveryManagerService.java#L112"&gt;ArjunaRecoveryManagerService&lt;/a&gt; (consider variants for JTA and JTS modes). &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Setup of expiry scanners interval&lt;/h4&gt;To configure the time interval after the "orphaned" record is handled as the expired one you can use the property &lt;a href="https://github.com/jbosstm/narayana/blob/5.9.5.Final/ArjunaCore/arjuna/classes/com/arjuna/ats/arjuna/common/RecoveryEnvironmentBean.java#L54"&gt;the property with the name&lt;/a&gt; &lt;code&gt;com.arjuna.ats.arjuna.common.RecoveryEnvironmentBean.expiryScanInterval&lt;/code&gt; or &lt;code&gt;RecoveryEnvironmentBean.expiryScanInterval&lt;/code&gt;. The value could be a positive whole number. Such number defines that the records expire after that number of hours. If you define the value as &lt;a href="https://github.com/jbosstm/narayana/blob/5.9.5.Final/ArjunaCore/arjuna/classes/com/arjuna/ats/internal/arjuna/recovery/ExpiredEntryMonitor.java#L225"&gt;a negative whole number&lt;/a&gt; then the first run of the expire scanner run skipped. Next run of the expire scanner expires the records after that (positive) number of hours. If you define the value to be &lt;code&gt;0&lt;/code&gt; then records are never handled by expiry scanners. &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;That's all in terms of this article. Feel free to ask a question here or at our forum at &lt;a href="https://developer.jboss.org/en/jbosstm"&gt;https://developer.jboss.org/en/jbosstm&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/lcRpsz5N1T0" height="1" width="1" alt=""/&gt;</content><summary>What are the expiry scanners?The expiry scanner serves for garbage collection of aged transaction records in Narayana. Before elaborating on that statement let's first find out why is such functionality needed. Narayana object store and transaction recordsNarayana creates persistent records when process transactions. These records are saved to the transaction log called Narayana object store. The ...</summary><dc:creator>Ondra Chaloupka</dc:creator><dc:date>2019-06-26T17:16:00Z</dc:date><feedburner:origLink>http://jbossts.blogspot.com/2019/06/expiry-scanners-and-object-store-in.html</feedburner:origLink></entry><entry><title>WildFly Elytron Credential Store APIs</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/vHZGrC3o6Mw/wildfly-elytron-credential-store-apis.html" /><category term="credentialstore" scheme="searchisko:content:tags" /><category term="Elytron" scheme="searchisko:content:tags" /><category term="EncryptedData" scheme="searchisko:content:tags" /><category term="feed_group_name_jbossas" scheme="searchisko:content:tags" /><category term="feed_name_darrans_wildfly_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="security" scheme="searchisko:content:tags" /><category term="wildfly" scheme="searchisko:content:tags" /><author><name>darranl</name></author><id>searchisko:content:id:jbossorg_blog-wildfly_elytron_credential_store_apis</id><updated>2019-06-26T10:25:22Z</updated><published>2019-06-26T10:25:00Z</published><content type="html">WildFly Elytron contains a CredentialStore API/SPI along with a default implementation that allows for the secure storage of various credential types.&amp;nbsp; This blog post is to introduce some of the APIs available to make use of the credential store from directly within your code.&lt;br /&gt;&lt;br /&gt;The full example is available at&amp;nbsp;&lt;a href="https://github.com/wildfly-security-incubator/elytron-examples/tree/master/credential-store" target="_blank"&gt;elytron-examples/credential-store&lt;/a&gt;&amp;nbsp;but this blog post will highlight the different steps in the code.&lt;br /&gt;&lt;br /&gt;Before the credential store is accesses a ProtectionParameter is needed for the store, the following two lines: -&lt;br /&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;Password storePassword = ClearPassword.createRaw(&lt;/span&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; ClearPassword.ALGORITHM_CLEAR,&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; "StorePassword".toCharArray());&lt;/span&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;ProtectionParameter protectionParameter = new CredentialSourceProtectionParameter(&lt;/span&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; IdentityCredentials.NONE.withCredential(&lt;/span&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; new PasswordCredential(storePassword)));&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Credential store implementations can be registered using java.security.Provider instances and follow a similar pattern used elsewhere: -&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;getInstance&lt;/li&gt;&lt;li&gt;initialise&lt;/li&gt;&lt;li&gt;use&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;An instance of the credential store we want to use can be obtained from: -&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;CredentialStore credentialStore = CredentialStore.getInstance(&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; "KeyStoreCredentialStore", CREDENTIAL_STORE_PROVIDER);&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;In this example an instance of java.security.Provider has been passed in, if this parameter was omitted the registered providers would be used instead.&lt;br /&gt;&lt;br /&gt;The credential store implementation provided with WildFly Elytron is "KeyStoreCredentialStore" which is a credential store implementation which makes use of a KeyStore for persistence.&lt;br /&gt;&lt;br /&gt;The credential store instance is now initialised using a Map and the previously created ProtectionParameter.&amp;nbsp; The values supported in the Map are specific to the credential store implementation.&lt;br /&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;Map&amp;lt;String, String&amp;gt; configuration = new HashMap&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;configuration.put("location", "mystore.cs");&lt;/span&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;configuration.put("create", "true");&lt;/span&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;credentialStore.initialize(configuration, protectionParameter);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;The "location" value is used to specify the full path to the file which represents the credential store.&amp;nbsp; The second option "create" specifies that the credential store should be created if it does not already exist, whilst tooling can be used to create and populate a store in advance this does mean that a store can be created entirely within the application that is using it.&lt;br /&gt;&lt;br /&gt;With those few lines we now have a credential store ready for use.&amp;nbsp; The first thing to do is to add some entries to this store.&amp;nbsp; Within the application server we do presently predominantly use this for storing passwords, however many alternative credential types can be stored using the credential store so here are a few examples of the types that can be stored.&lt;br /&gt;&lt;br /&gt;Storage of a clear text password: -&lt;br /&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;Password clearPassword = ClearPassword.createRaw(&lt;/span&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; ClearPassword.ALGORITHM_CLEAR, "ExamplePassword".toCharArray());&lt;/span&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;credentialStore.store("clearPassword",&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; new PasswordCredential(clearPassword));&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Generation and storage of a SecretKey: -&lt;br /&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");&lt;/span&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;keyGenerator.init(256);&lt;/span&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;SecretKey secretKey = keyGenerator.generateKey();&lt;/span&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;credentialStore.store("secretKey",&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; new SecretKeyCredential(secretKey));&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Generation and storage of a KeyPair: -&lt;br /&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");&lt;/span&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;keyPairGenerator.initialize(2048, SecureRandom.getInstanceStrong());&lt;/span&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;KeyPair keyPair = keyPairGenerator.generateKeyPair();&lt;/span&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;credentialStore.store("keyPair", new KeyPairCredential(keyPair));&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Storage of just the public key from the KeyPair: -&lt;br /&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;credentialStore.store("publicKey",&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; new PublicKeyCredential(keyPair.getPublic()));&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Various credential types are supported within WildFly Elytron and can be seen here: -&lt;br /&gt;&lt;br /&gt;&lt;a href="http://wildfly-security.github.io/wildfly-elytron/1.9.x/api-javadoc/org/wildfly/security/credential/package-summary.html"&gt;http://wildfly-security.github.io/wildfly-elytron/1.9.x/api-javadoc/org/wildfly/security/credential/package-summary.html&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;For custom credential store implementation different credential types may be supported including custom ones not listed here.&lt;br /&gt;&lt;br /&gt;Once we have a populated credential store it is possible to list the aliases similar to how you would for a KeyStore: -&lt;br /&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;System.out.println("************************************");&lt;/span&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;System.out.println("Current Aliases: -");&lt;/span&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;for (String alias : credentialStore.getAliases()) {&lt;/span&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; System.out.print(" - ");&lt;/span&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; System.out.println(alias);&lt;/span&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;System.out.println("************************************");&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Finally the purpose of storing credentials in a credential store is so that they can subsequently be retrieved, the following shows how each of the credentials added above can be retrieved: -&lt;br /&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;Password password = credentialStore.retrieve(&lt;/span&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; "clearPassword", PasswordCredential.class).getPassword();&lt;/span&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;SecretKey secretKey = credentialStore.retrieve(&lt;/span&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; "secretKey", SecretKeyCredential.class).getSecretKey();&lt;/span&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;KeyPair keyPair = credentialStore.retrieve(&lt;/span&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; "keyPair", KeyPairCredential.class).getKeyPair();&lt;/span&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;PublicKey publicKey = credentialStore.retrieve(&lt;/span&gt;&lt;br /&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; "publicKey", PublicKeyCredential.class).getPublicKey();&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;In the above command the expected credential type is passed into the retrieve method, using the credential store APIs it is possible for multiple credentials to be stored under the same alias.&amp;nbsp; This could be useful in situations where a single alias can represent say a password AND a secret key.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/vHZGrC3o6Mw" height="1" width="1" alt=""/&gt;</content><summary>WildFly Elytron contains a CredentialStore API/SPI along with a default implementation that allows for the secure storage of various credential types.  This blog post is to introduce some of the APIs available to make use of the credential store from directly within your code. The full example is available at elytron-examples/credential-store but this blog post will highlight the different steps i...</summary><dc:creator>darranl</dc:creator><dc:date>2019-06-26T10:25:00Z</dc:date><feedburner:origLink>http://darranl.blogspot.com/2019/06/wildfly-elytron-credential-store-apis.html</feedburner:origLink></entry><entry><title>Using Quay.io to find vulnerabilities in your container images</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/qWdKSkP7BGE/" /><category term="Containers" /><category term="Developer Tools" /><category term="Security" /><category term="containers" /><category term="quay" /><author><name>Doug Tidwell</name></author><id>https://developers.redhat.com/blog/?p=605747</id><updated>2019-06-26T07:00:48Z</updated><published>2019-06-26T07:00:48Z</published><content type="html">&lt;p&gt;You&amp;#8217;ve created a container image that has all the packages that you and your team need to do something useful, or maybe you&amp;#8217;ve built a public image that anybody can use. But, what if that image contains packages with known security vulnerabilities? Regardless of the severity of those vulnerabilities, you&amp;#8217;ll want to learn more and take steps to mitigate them as soon as possible.&lt;/p&gt; &lt;p&gt;Fortunately, your team uses &lt;a href="https://quay.io"&gt;Quay.io&lt;/a&gt;* as your registry. When you push an image to Quay.io, it automatically runs a security scan against that image.&lt;span id="more-605747"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Here are the results of the latest scan for &lt;a href="https://quay.io/repository/dougtidwell/2048-stack"&gt;an image I built a few months ago&lt;/a&gt; for &lt;a href="https://developers.redhat.com/che-custom-stacks/"&gt;an article about creating custom stacks for Eclipse Che&lt;/a&gt;:&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-large wp-image-606527 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/06/Initial-scan-with-vulnerabilities-1024x485.jpg" src="https://developers.redhat.com/blog/wp-content/uploads/2019/06/Initial-scan-with-vulnerabilities-1024x485.jpg" alt="Initial scan with vulnerabilities" width="640" height="303" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/06/Initial-scan-with-vulnerabilities-1024x485.jpg 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/06/Initial-scan-with-vulnerabilities-300x142.jpg 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/06/Initial-scan-with-vulnerabilities-768x364.jpg 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/p&gt; &lt;p&gt;As you can see, I found to my dismay that there are three security vulnerabilities ranked &lt;em&gt;High&lt;/em&gt;. They weren&amp;#8217;t there when I built the image; they&amp;#8217;ve been discovered since I pushed the image to the registry. Hopefully, they&amp;#8217;re included in the 101 vulnerabilities labeled &lt;em&gt;Fixable&lt;/em&gt;. Clicking on &lt;em&gt;101 fixable&lt;/em&gt; gives a list of all the vulnerabilities and their fixes—if any—as shown in the following screenshot.&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-large wp-image-605937 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/06/Screen-Shot-2019-06-11-at-1.46.59-PM-1024x485.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/06/Screen-Shot-2019-06-11-at-1.46.59-PM-1024x485.png" alt="Vulnerability list" width="640" height="303" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/06/Screen-Shot-2019-06-11-at-1.46.59-PM-1024x485.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/06/Screen-Shot-2019-06-11-at-1.46.59-PM-300x142.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/06/Screen-Shot-2019-06-11-at-1.46.59-PM-768x364.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/p&gt; &lt;p&gt;Fortunately, all three of the high vulnerabilities have fixes. In this image, the leftmost column lists the CVE number for each vulnerability. (CVE stands for &lt;a href="https://cve.mitre.org/"&gt;Common Vulnerabilities and Exposures&lt;/a&gt;, a reference method for publicly known issues.) Clicking the link icon next to the CVE number takes you to the actual vulnerability report. Together, these resources will give you all the available information about the issues identified by the security scan.&lt;/p&gt; &lt;p&gt;Again, the three high vulnerabilities all have fixes, as shown in the &lt;em&gt;Fixed in version&lt;/em&gt; column. If we rebuild the image and push it back to Quay.io, it will automatically be rescanned. If we&amp;#8217;re lucky, all of the fixes will be applied, and our new image will be safe for the world once more.&lt;/p&gt; &lt;p&gt;We can improve our luck by making sure any updates and upgrades are applied to the new image. My &lt;code&gt;Dockerfile&lt;/code&gt; starts like this:&lt;/p&gt; &lt;pre&gt;# Base the image on the standard C++ stack FROM eclipse/cpp_gcc # Basic system hygiene RUN sudo apt-get -y update &amp;#38;&amp;#38; \ sudo apt-get -y upgrade &amp;#38;&amp;#38; \&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;update&lt;/code&gt; and &lt;code&gt;upgrade&lt;/code&gt; commands for your distribution manager (&lt;code&gt;apt-get&lt;/code&gt;, &lt;code&gt;yum&lt;/code&gt;, &lt;code&gt;dnf&lt;/code&gt;, etc.) ensure that all of the packages in the base image are updated and upgraded before the image build continues.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Pro tip&lt;/strong&gt;: Using the Linux AND operator (&lt;code&gt;&amp;#38;&amp;#38;&lt;/code&gt;) lets you execute multiple commands with a single &lt;code&gt;RUN&lt;/code&gt; statement. That prevents your image building tool (&lt;code&gt;podman&lt;/code&gt; or &lt;code&gt;docker&lt;/code&gt;) from creating a separate layer for each command.&lt;/p&gt; &lt;p&gt;After I rebuilt the image and pushed it back to Quay.io, the security scan looks much better:&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-large wp-image-606547 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/06/Follow-up-scan-1024x485.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/06/Follow-up-scan-1024x485.png" alt="" width="640" height="303" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/06/Follow-up-scan-1024x485.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/06/Follow-up-scan-300x142.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/06/Follow-up-scan-768x364.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/p&gt; &lt;p&gt;We don&amp;#8217;t have any high vulnerabilities now. Opening the report and clicking the &lt;em&gt;Only show fixable&lt;/em&gt; checkbox shows that the package repositories we&amp;#8217;re using do not have any fixes yet for the problems Quay.io found:&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-large wp-image-606567 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/06/No-matching-vulnerabilities-found-1024x253.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/06/No-matching-vulnerabilities-found-1024x253.png" alt="No matching vulnerabilities found" width="640" height="158" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/06/No-matching-vulnerabilities-found-1024x253.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/06/No-matching-vulnerabilities-found-300x74.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/06/No-matching-vulnerabilities-found-768x190.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/p&gt; &lt;p&gt;Now it&amp;#8217;s time for a judgment call. Unchecking &amp;#8220;Only show fixable&amp;#8221; displays the entire list. You can then look at the CVE report for each item and decide whether it&amp;#8217;s crucial to fix any of your remaining vulnerabilities. If so, you may be able to find a fix outside the package repositories you&amp;#8217;re using. (There is usually a lag of a few days between the time a fix is released and the time it shows up in the repos.) If a fix exists elsewhere, you&amp;#8217;ll have to do something like updating your &lt;code&gt;Dockerfile&lt;/code&gt; to use &lt;code&gt;curl&lt;/code&gt; to get the fix and then using your platform&amp;#8217;s install tool to add it to your image.&lt;/p&gt; &lt;p&gt;Quay.io scans your image periodically, so it&amp;#8217;s a good idea to check your image on a regular basis. When you do, you&amp;#8217;ll see an up-to-date list of any vulnerabilities in your image along with the information you need to evaluate them. &lt;a href="https://www.openshift.com/products/quay"&gt;Red Hat Quay is also available as a separate product&lt;/a&gt; so you can create private registries that deliver the same features.&lt;/p&gt; &lt;p&gt;With Quay.io&amp;#8217;s security scans, you can make sure your image is as safe and secure as possible.&lt;/p&gt; &lt;hr /&gt; &lt;p&gt;* Although the English-speaking world outside of the United States pronounces this word &amp;#8220;key,&amp;#8221; the product is officially pronounced &amp;#8220;kway.&amp;#8221; (Google Translate pronounces it &amp;#8220;key&amp;#8221; as well.) I&amp;#8217;m just the messenger here.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F06%2F26%2Fusing-quay-io-to-find-vulnerabilities-in-your-container-images%2F&amp;#38;linkname=Using%20Quay.io%20to%20find%20vulnerabilities%20in%20your%20container%20images" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F06%2F26%2Fusing-quay-io-to-find-vulnerabilities-in-your-container-images%2F&amp;#38;linkname=Using%20Quay.io%20to%20find%20vulnerabilities%20in%20your%20container%20images" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F06%2F26%2Fusing-quay-io-to-find-vulnerabilities-in-your-container-images%2F&amp;#38;linkname=Using%20Quay.io%20to%20find%20vulnerabilities%20in%20your%20container%20images" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F06%2F26%2Fusing-quay-io-to-find-vulnerabilities-in-your-container-images%2F&amp;#38;linkname=Using%20Quay.io%20to%20find%20vulnerabilities%20in%20your%20container%20images" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F06%2F26%2Fusing-quay-io-to-find-vulnerabilities-in-your-container-images%2F&amp;#38;linkname=Using%20Quay.io%20to%20find%20vulnerabilities%20in%20your%20container%20images" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F06%2F26%2Fusing-quay-io-to-find-vulnerabilities-in-your-container-images%2F&amp;#38;linkname=Using%20Quay.io%20to%20find%20vulnerabilities%20in%20your%20container%20images" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F06%2F26%2Fusing-quay-io-to-find-vulnerabilities-in-your-container-images%2F&amp;#38;linkname=Using%20Quay.io%20to%20find%20vulnerabilities%20in%20your%20container%20images" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F06%2F26%2Fusing-quay-io-to-find-vulnerabilities-in-your-container-images%2F&amp;#038;title=Using%20Quay.io%20to%20find%20vulnerabilities%20in%20your%20container%20images" data-a2a-url="https://developers.redhat.com/blog/2019/06/26/using-quay-io-to-find-vulnerabilities-in-your-container-images/" data-a2a-title="Using Quay.io to find vulnerabilities in your container images"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/06/26/using-quay-io-to-find-vulnerabilities-in-your-container-images/"&gt;Using Quay.io to find vulnerabilities in your container images&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/qWdKSkP7BGE" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;You&amp;#8217;ve created a container image that has all the packages that you and your team need to do something useful, or maybe you&amp;#8217;ve built a public image that anybody can use. But, what if that image contains packages with known security vulnerabilities? Regardless of the severity of those vulnerabilities, you&amp;#8217;ll want to learn more and [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/06/26/using-quay-io-to-find-vulnerabilities-in-your-container-images/"&gt;Using Quay.io to find vulnerabilities in your container images&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/06/26/using-quay-io-to-find-vulnerabilities-in-your-container-images/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">605747</post-id><dc:creator>Doug Tidwell</dc:creator><dc:date>2019-06-26T07:00:48Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/06/26/using-quay-io-to-find-vulnerabilities-in-your-container-images/</feedburner:origLink></entry></feed>
